# DO NOT EDIT - file generated by corresponding .py file
snippet lc "List comprehension" w
[${1:x} for ${2:x} in ${3:iter}]
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet def "Define function" b
def ${1:func_name}(${2:args}):
    ${3:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet class "Define a class" b
class ${1:MyClass}(${2:inherits}):
    def __init__(self, ${3:args}):
        ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet setUpTestData "Django testing setUpTestData" b
@classmethod
def setUpTestData(cls):
    super(${1:classname}, cls).setUpTestData()
    ${2:setup}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet setuptestdata "Django testing setUpTestData" b
@classmethod
def setUpTestData(cls):
    super(${1:classname}, cls).setUpTestData()
    ${2:setup}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet setUp "Django testing setUp" b
def setUp(self):
    super(${1:class}, self).setUp()
    ${2:setup}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet filter "Django filter objects" w
${1:model}.objects.filter(${2:fields})
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet patch "MagicMock @patch" b
@patch('${1:object}')
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet test "def test_...(self)" b
def test_${1:funcname}(self):
    ${2:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet t "def test_...(self)" b
def test_${1:funcname}(self):
    ${2:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tc "def test_...(self)" b
def test_${1:funcname}(self):
    ${2:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tabletest "def test_...(self)" bm
def test_${1:funcname}(self):
    Case = namedtuple('Case', (${2:keys})

    cases = [
        ${3:cases}
    ]

    for case in self.tableTest(cases):
        ${4:assert}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tt "def test_...(self)" bm
def test_${1:funcname}(self):
    Case = namedtuple('Case', (${2:keys})

    cases = [
        ${3:cases}
    ]

    for case in self.tableTest(cases):
        ${4:assert}
endsnippet
